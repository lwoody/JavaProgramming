package multiClient;

import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;

public class MultiServer {

	HashMap clients;

	MultiServer() {
		clients = new HashMap();
		Collections.synchronizedMap(clients);// ?
	}

	public void start() {
		ServerSocket serverSocket = null;
		Socket socket = null;

		try {
			serverSocket = new ServerSocket(7777);
			System.out.println("server running... ");

			while (true) {
				socket = serverSocket.accept();
				ServerReciever recieverThread = new ServerReciever(socket);
				recieverThread.start();

			}

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	class ServerReciever extends Thread {
		Socket socket;
		DataInputStream in;
		DataOutputStream out;

		public ServerReciever(Socket socket) {

			try {
				this.socket = socket;
				this.in = new DataInputStream(socket.getInputStream());
				this.out = new DataOutputStream(socket.getOutputStream());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		public void run() {
			//
		}
	}

	public void sendToAll(String msg) {
		Iterator it = clients.keySet().iterator();

		while (it.hasNext()) {
			DataOutputStream out = (DataOutputStream) clients.get(it.next());
			try {
				out.writeUTF(msg);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	public static void main(String[] args) {
		// if(args.length!=1){
		// System.out.println("manual : fdsafd");
		// System.exit(0);
		// }

	}

}
